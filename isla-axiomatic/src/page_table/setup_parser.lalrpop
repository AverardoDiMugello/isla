// BSD 2-Clause License
//
// Copyright (c) 2020 Alasdair Armstrong
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use std::collections::HashMap;

use isla_lib::ir::{Name, Symtab};
use isla_lib::zencode;

use crate::page_table::setup::*;
use crate::page_table::setup::AddressConstraint::*;
use crate::page_table::setup::TableConstraint::*;
use crate::page_table::setup_lexer::Tok;

use lalrpop_util::ParseError;

grammar<'input>;

pub Setup: Vec<Constraint> = {
    <constraints:(<Constraint>)*> => constraints,
}

Constraint: Constraint = {
    <lhs:Exp> "|->" <rhs:Exp> => Constraint::Table(MapsTo(lhs, rhs)),
}

Exp: Exp = {
    <f:Id> "(" ")" => Exp::App(f, Vec::new()),
    <f:Id> "(" <arg1:Exp> <mut argn:("," <Exp>)*> ")" => {
        let mut args = vec![arg1];
        args.append(&mut argn);
        Exp::App(f, args)
    }
}

Id: String = <id:"identifier"> => id.to_string();
Hex: String = <b:"hex"> => b[2..].to_string();
Bin: String = <b:"bin"> => b[2..].to_string();

extern {
    type Location = usize;
    type Error = SetupParseError;

    enum Tok<'input> {
        "identifier" => Tok::Id(<&'input str>),
        "natural" => Tok::Nat(<&'input str>),
        "hex" => Tok::Hex(<&'input str>),
        "bin" => Tok::Bin(<&'input str>),
        "|->" => Tok::MapsTo,
        "->" => Tok::Implies,
        "~" => Tok::Not,
        "true" => Tok::True,
        "false" => Tok::False,
        "and" => Tok::And,
        "or" => Tok::Or,
        ":" => Tok::Colon,
        "=" => Tok::Eq,
        "*" => Tok::Star,
        "," => Tok::Comma,
        "." => Tok::Dot,
        "(" => Tok::Lparen,
        ")" => Tok::Rparen,
        "[" => Tok::Lsquare,
        "]" => Tok::Rsquare,
    }
}
