// BSD 2-Clause License
//
// Copyright (c) 2020 Alasdair Armstrong
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use std::str::FromStr;

use crate::page_table::setup::*;
use crate::page_table::setup::AddressConstraint::*;
use crate::page_table::setup::TableConstraint::*;
use crate::page_table::setup_lexer::Tok;

grammar<'input>;

pub Setup: Vec<Constraint> = {
    <mut constraints:(<Constraint> ";")*> <last:Constraint?> => {
        if let Some(constraint) = last {
            constraints.push(constraint);
        }
        constraints
    },
}

Attrs: Attrs = {
    "default" => Attrs::Default,
    "code" => Attrs::Code,
}

Constraint: Constraint = {
    "virtual" <addrs:Id+> => Constraint::Address(Virtual(addrs)),
    "intermediate" <addrs:Id+> => Constraint::Address(Intermediate(addrs)),
    "physical" <addrs:Id+> => Constraint::Address(Physical(addrs)),
    "identity" <exp:Exp> => Constraint::Table(IdentityMap(exp, Attrs::Default)),
    "identity" <exp:Exp> "with" <attrs:Attrs> => Constraint::Table(IdentityMap(exp, attrs)),
    <lhs:Exp> "|->" <rhs:Exp> => Constraint::Table(MapsTo(lhs, rhs, Attrs::Default)),
    <lhs:Exp> "|->" <rhs:Exp> "with" <attrs:Attrs> => Constraint::Table(MapsTo(lhs, rhs, attrs)),
    <lhs:Exp> "?->" <rhs:Exp> => Constraint::Table(MaybeMapsTo(lhs, rhs, Attrs::Default)),
    <lhs:Exp> "?->" <rhs:Exp> "with" <attrs:Attrs> => Constraint::Table(MaybeMapsTo(lhs, rhs, attrs)),
    "*" <addr:Exp> "=" <exp:Exp> => Constraint::Initial(addr, exp),
    "assert" <exp:Exp> => Constraint::Address(Assertion(exp)),
    "let" <name:Id> "(" <arg1:Id> <mut argn:("," <Id>)*> ")" "=" <body:Exp> => {
        let mut args = vec![arg1];
        args.append(&mut argn);
        Constraint::Address(Function(name, args, body))
    }
}

Exp: Exp = {
    <lhs:UnaryExp> "&&" <rhs:UnaryExp> => Exp::App("and_bool".to_string(), vec![lhs, rhs]),
    <lhs:UnaryExp> "||" <rhs:UnaryExp> => Exp::App("or_bool".to_string(), vec![lhs, rhs]),
    <lhs:UnaryExp> "&" <rhs:UnaryExp> => Exp::App("and_bits".to_string(), vec![lhs, rhs]),
    <lhs:UnaryExp> "|" <rhs:UnaryExp> => Exp::App("or_bits".to_string(), vec![lhs, rhs]),
    <lhs:UnaryExp> "^" <rhs:UnaryExp> => Exp::App("xor_bits".to_string(), vec![lhs, rhs]),
    <lhs:UnaryExp> "==" <rhs:UnaryExp> => Exp::App("eq_bits".to_string(), vec![lhs, rhs]),
    <exp:UnaryExp> => exp,
}

UnaryExp: Exp = {
    "~" <exp:AtomicExp> => Exp::App("not_bits".to_string(), vec![exp]),
    <exp:AtomicExp> => exp,
}

AtomicExp: Exp = {
    <f:Id> "(" ")" => Exp::App(f, Vec::new()),
    <f:Id> "(" <arg1:Exp> <mut argn:("," <Exp>)*> ")" => {
        let mut args = vec![arg1];
        args.append(&mut argn);
        Exp::App(f, args)
    },
    <exp:AtomicExp> "[" <from:Exp> ".." <to:Exp> "]" => Exp::App("vector_subrange".to_string(), vec![exp, from, to]),
    <id:Id> => Exp::Id(id),
    <n:"natural"> => Exp::I128(i128::from_str(n).expect("failed to parse integer")),
    <hex:Hex> => Exp::Hex(hex),
    "(" <exp:Exp> ")" => exp,
}

Id: String = <id:"identifier"> => id.to_string();
Hex: String = <b:"hex"> => b.to_string();
Bin: String = <b:"bin"> => b.to_string();

extern {
    type Location = usize;
    type Error = SetupParseError;

    enum Tok<'input> {
        "identifier" => Tok::Id(<&'input str>),
        "natural" => Tok::Nat(<&'input str>),
        "hex" => Tok::Hex(<&'input str>),
        "bin" => Tok::Bin(<&'input str>),
        "identity" => Tok::Identity,
        "|->" => Tok::MapsTo,
        "?->" => Tok::MaybeMapsTo,
        "->" => Tok::Implies,
        "~" => Tok::Not,
        "true" => Tok::True,
        "false" => Tok::False,
        "assert" => Tok::Assert,
        "virtual" => Tok::Virtual,
        "intermediate" => Tok::Intermediate,
        "physical" => Tok::Physical,
        "with" => Tok::With,
        "code" => Tok::Code,
        "default" => Tok::Default,
        "true" => Tok::True,
        "false" => Tok::False,
        "let" => Tok::Let,
        "&&" => Tok::BooleanAnd,
        "&" => Tok::BitAnd,
        "||" => Tok::BooleanOr,
        "|" => Tok::BitOr,
        ":" => Tok::Colon,
        ";" => Tok::Semi,
        "==" => Tok::EqEq,
        "=" => Tok::Eq,
        "*" => Tok::Star,
        "^" => Tok::Caret,
        "," => Tok::Comma,
        ".." => Tok::DotDot,
        "." => Tok::Dot,
        "(" => Tok::Lparen,
        ")" => Tok::Rparen,
        "[" => Tok::Lsquare,
        "]" => Tok::Rsquare,
    }
}
