// MIT License
//
// Copyright (c) 2019 Alasdair Armstrong
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::str::FromStr;
use isla_lib::lexer::LexError;
use crate::sexp::*;
use crate::sexp_lexer::Tok;

grammar<'input>;

pub Sexp: Sexp<'input> = {
    "(" <sexps:List<Sexp>> ")" => Sexp::List(sexps),
    <a:"atom"> => Sexp::Atom(a),
    <nat:"nat"> => Sexp::I128(i128::from_str(nat).unwrap()),
    <hex:"hex"> => Sexp::Bits(hex),
    <bin:"bin"> => Sexp::Bits(bin),
}

List<T>: Vec<T> = {
    <v:(<T>)*> => v
};

extern {
    type Location = usize;
    type Error = LexError;

    enum Tok<'input> {
        "atom" => Tok::Atom(<&'input str>),
        "nat" => Tok::Nat(<&'input str>),
        "hex" => Tok::Hex(<&'input str>),
        "bin" => Tok::Bin(<&'input str>),
        "(" => Tok::Lparen,
        ")" => Tok::Rparen,
    }
}
