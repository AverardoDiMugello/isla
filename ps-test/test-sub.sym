Register read zNUM_GTE_EXT_OBS_OBSERVERS (1760) = I64(4)
ReadReg(1760, [], I64(4))
Register read zNUM_GTE_EXT_OBS_OBSERVATIONS_PER_OBSERVER (1763) = I64(64)
ReadReg(1763, [], I64(64))
opcode: Sbits { length: 32, bits: 3506455551 }
Register write zSEE (282354) = I128(-1)
WriteReg(282354, I128(-1))
DeclareConst(0, BitVec(1))
DeclareConst(1, BitVec(2))
DeclareConst(2, BitVec(8))
DeclareConst(3, BitVec(1))
DeclareConst(4, BitVec(1))
DeclareConst(5, BitVec(1))
DeclareConst(6, BitVec(1))
DeclareConst(7, BitVec(1))
DeclareConst(8, BitVec(1))
DeclareConst(9, BitVec(1))
DeclareConst(10, BitVec(1))
DeclareConst(11, BitVec(1))
DeclareConst(12, BitVec(2))
DeclareConst(13, BitVec(1))
DeclareConst(14, BitVec(1))
DeclareConst(15, BitVec(1))
DeclareConst(16, BitVec(1))
DeclareConst(17, BitVec(5))
DeclareConst(18, BitVec(1))
DeclareConst(19, BitVec(1))
DeclareConst(20, BitVec(1))
DeclareConst(21, BitVec(1))
DeclareConst(22, BitVec(4))
DeclareConst(23, BitVec(1))
DeclareConst(24, BitVec(1))
DeclareConst(25, BitVec(1))
Register write zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
WriteReg(1720, Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Register write z__v85_implemented (1508) = Bool(false)
WriteReg(1508, Bool(false))
DeclareConst(26, BitVec(64))
Register read zSP_EL2 (25391) = Symbolic(26)
ReadReg(25391, [], Symbolic(26))
DefineConst(27, Bvor(Var(26), Bits64(65535, 64)))
Register write zSP_EL2 (25391) = Symbolic(27)
WriteReg(25391, Symbolic(27))
Register read zSEE (282354) = I128(-1)
ReadReg(282354, [], I128(-1))
Register write zSEE (282354) = I128(1393)
WriteReg(282354, I128(1393))
Register write z__unconditional (25124) = Bool(true)
WriteReg(25124, Bool(true))
DeclareConst(28, BitVec(64))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read z__v85_implemented (1508) = Bool(false)
ReadReg(1508, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
DeclareConst(29, BitVec(64))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
DefineConst(30, Eq(Var(6), Bits64(0, 1)))
Assert(Var(30))
DeclareConst(31, BitVec(64))
Register read zSP_EL0 (25393) = Symbolic(31)
ReadReg(25393, [], Symbolic(31))
DefineConst(32, Extract(63, 0, Var(31)))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
DeclareConst(33, BitVec(4))
DeclareConst(34, BitVec(1))
DefineConst(35, ZeroExtend(64, Var(32)))
DefineConst(36, Bvadd(Var(35), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))
DefineConst(37, Bvadd(Var(36), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))
DefineConst(38, SignExtend(64, Var(32)))
DefineConst(39, Bvadd(Var(38), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true])))
DefineConst(40, Bvadd(Var(39), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))
DefineConst(41, Extract(63, 0, Var(37)))
DefineConst(42, Extract(0, 0, Bvlshr(Var(41), Extract(63, 0, Bits([true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))))
DefineConst(43, Bvor(Bvand(Bits64(0, 1), Bvshl(Bits([false]), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))), Bvshl(ZeroExtend(0, Var(42)), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))))
DefineConst(44, Eq(Var(41), Bits64(0, 64)))
Assert(Var(44))
DefineConst(45, ZeroExtend(64, Var(41)))
DefineConst(46, Eq(Var(45), Var(37)))
Assert(Not(Var(46)))
DefineConst(47, SignExtend(64, Var(41)))
DefineConst(48, Eq(Var(47), Var(40)))
Assert(Var(48))
DefineConst(49, Concat(Var(43), Bits64(1, 1)))
DefineConst(50, Concat(Var(49), Bits64(1, 1)))
DefineConst(51, Concat(Var(50), Bits64(0, 1)))
DeclareConst(52, BitVec(4))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
DefineConst(53, Eq(Var(6), Bits64(0, 1)))
Assert(Var(53))
DefineConst(54, Var(41))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register write zSP_EL0 (25393) = Symbolic(54)
WriteReg(25393, Symbolic(54))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
(formula
  (declare-const v0 (_ BitVec 1))
  (declare-const v1 (_ BitVec 2))
  (declare-const v2 (_ BitVec 8))
  (declare-const v3 (_ BitVec 1))
  (declare-const v4 (_ BitVec 1))
  (declare-const v5 (_ BitVec 1))
  (declare-const v6 (_ BitVec 1))
  (declare-const v7 (_ BitVec 1))
  (declare-const v8 (_ BitVec 1))
  (declare-const v9 (_ BitVec 1))
  (declare-const v10 (_ BitVec 1))
  (declare-const v11 (_ BitVec 1))
  (declare-const v12 (_ BitVec 2))
  (declare-const v13 (_ BitVec 1))
  (declare-const v14 (_ BitVec 1))
  (declare-const v15 (_ BitVec 1))
  (declare-const v16 (_ BitVec 1))
  (declare-const v17 (_ BitVec 5))
  (declare-const v18 (_ BitVec 1))
  (declare-const v19 (_ BitVec 1))
  (declare-const v20 (_ BitVec 1))
  (declare-const v21 (_ BitVec 1))
  (declare-const v22 (_ BitVec 4))
  (declare-const v23 (_ BitVec 1))
  (declare-const v24 (_ BitVec 1))
  (declare-const v25 (_ BitVec 1))
  (declare-const v26 (_ BitVec 64))
  (define-const v27 (bvor v26 #x000000000000ffff))
  (declare-const v28 (_ BitVec 64))
  (declare-const v29 (_ BitVec 64))
  (define-const v30 (eq v6 #b0))
  (assert v30)
  (declare-const v31 (_ BitVec 64))
  (define-const v32 ((_ extract 63 0) v31))
  (declare-const v33 (_ BitVec 4))
  (declare-const v34 (_ BitVec 1))
  (define-const v35 ((_ zero_extend 64) v32))
  (define-const v36 (bvadd v35 #x0000000000000000ffffffffffffffef))
  (define-const v37 (bvadd v36 #x00000000000000000000000000000001))
  (define-const v38 ((_ sign_extend 64) v32))
  (define-const v39 (bvadd v38 #xffffffffffffffffffffffffffffffef))
  (define-const v40 (bvadd v39 #x00000000000000000000000000000001))
  (define-const v41 ((_ extract 63 0) v37))
  (define-const v42 ((_ extract 0 0) (bvlshr v41 ((_ extract 63 0) #x0000000000000000000000000000003f))))
  (define-const v43 (bvor (bvand #b0 (bvshl #b0 ((_ extract 0 0) #x0000000000000000))) (bvshl ((_ zero_extend 0) v42) ((_ extract 0 0) #x0000000000000000))))
  (define-const v44 (eq v41 #x0000000000000000))
  (assert v44)
  (define-const v45 ((_ zero_extend 64) v41))
  (define-const v46 (eq v45 v37))
  (assert (not v46))
  (define-const v47 ((_ sign_extend 64) v41))
  (define-const v48 (eq v47 v40))
  (assert v48)
  (define-const v49 (concat v43 #b1))
  (define-const v50 (concat v49 #b1))
  (define-const v51 (concat v50 #b0))
  (declare-const v52 (_ BitVec 4))
  (define-const v53 (eq v6 #b0))
  (assert v53)
  (define-const v54 v41))

(events
  (write-reg |SEE| (_ bv-1 128))
  (write-reg |PSTATE| (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |__v85_implemented| false)
  (read-reg |SP_EL2| nil v26)
  (write-reg |SP_EL2| v27)
  (read-reg |SEE| nil (_ bv-1 128))
  (write-reg |SEE| (_ bv1393 128))
  (write-reg |__unconditional| true)
  (read-reg |__v85_implemented| nil false)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |SP_EL0| nil v31)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |SP_EL0| v54))
WriteReg(282354, I128(-1))
Smt(DeclareConst(0, BitVec(1)))
Smt(DeclareConst(1, BitVec(2)))
Smt(DeclareConst(2, BitVec(8)))
Smt(DeclareConst(3, BitVec(1)))
Smt(DeclareConst(4, BitVec(1)))
Smt(DeclareConst(5, BitVec(1)))
Smt(DeclareConst(6, BitVec(1)))
Smt(DeclareConst(7, BitVec(1)))
Smt(DeclareConst(8, BitVec(1)))
Smt(DeclareConst(9, BitVec(1)))
Smt(DeclareConst(10, BitVec(1)))
Smt(DeclareConst(11, BitVec(1)))
Smt(DeclareConst(12, BitVec(2)))
Smt(DeclareConst(13, BitVec(1)))
Smt(DeclareConst(14, BitVec(1)))
Smt(DeclareConst(15, BitVec(1)))
Smt(DeclareConst(16, BitVec(1)))
Smt(DeclareConst(17, BitVec(5)))
Smt(DeclareConst(18, BitVec(1)))
Smt(DeclareConst(19, BitVec(1)))
Smt(DeclareConst(20, BitVec(1)))
Smt(DeclareConst(21, BitVec(1)))
Smt(DeclareConst(22, BitVec(4)))
Smt(DeclareConst(23, BitVec(1)))
Smt(DeclareConst(24, BitVec(1)))
Smt(DeclareConst(25, BitVec(1)))
WriteReg(1720, Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
WriteReg(1508, Bool(false))
Smt(DeclareConst(26, BitVec(64)))
ReadReg(25391, [], Symbolic(26))
Smt(DefineConst(27, Bvor(Var(26), Bits64(65535, 64))))
WriteReg(25391, Symbolic(27))
ReadReg(282354, [], I128(-1))
WriteReg(282354, I128(1393))
WriteReg(25124, Bool(true))
Smt(DeclareConst(28, BitVec(64)))
ReadReg(5, [], Bool(false))
ReadReg(1508, [], Bool(false))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(29, BitVec(64)))
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Smt(DefineConst(30, Eq(Var(6), Bits64(0, 1))))
Smt(Assert(Var(30)))
Smt(DeclareConst(31, BitVec(64)))
ReadReg(25393, [], Symbolic(31))
Smt(DefineConst(32, Extract(63, 0, Var(31))))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(33, BitVec(4)))
Smt(DeclareConst(34, BitVec(1)))
Smt(DefineConst(35, ZeroExtend(64, Var(32))))
Smt(DefineConst(36, Bvadd(Var(35), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(37, Bvadd(Var(36), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(38, SignExtend(64, Var(32))))
Smt(DefineConst(39, Bvadd(Var(38), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]))))
Smt(DefineConst(40, Bvadd(Var(39), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(41, Extract(63, 0, Var(37))))
Smt(DefineConst(42, Extract(0, 0, Bvlshr(Var(41), Extract(63, 0, Bits([true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))))
Smt(DefineConst(43, Bvor(Bvand(Bits64(0, 1), Bvshl(Bits([false]), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))), Bvshl(ZeroExtend(0, Var(42)), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))))
Smt(DefineConst(44, Eq(Var(41), Bits64(0, 64))))
Assert(Not(Var(44)))
DefineConst(45, ZeroExtend(64, Var(41)))
DefineConst(46, Eq(Var(45), Var(37)))
Assert(Var(46))
DefineConst(47, SignExtend(64, Var(41)))
DefineConst(48, Eq(Var(47), Var(40)))
Assert(Var(48))
DefineConst(49, Concat(Var(43), Bits64(0, 1)))
DefineConst(50, Concat(Var(49), Bits64(0, 1)))
DefineConst(51, Concat(Var(50), Bits64(0, 1)))
DeclareConst(52, BitVec(4))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
DefineConst(53, Eq(Var(6), Bits64(0, 1)))
Assert(Var(53))
DefineConst(54, Var(41))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register write zSP_EL0 (25393) = Symbolic(54)
WriteReg(25393, Symbolic(54))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
(formula
  (declare-const v0 (_ BitVec 1))
  (declare-const v1 (_ BitVec 2))
  (declare-const v2 (_ BitVec 8))
  (declare-const v3 (_ BitVec 1))
  (declare-const v4 (_ BitVec 1))
  (declare-const v5 (_ BitVec 1))
  (declare-const v6 (_ BitVec 1))
  (declare-const v7 (_ BitVec 1))
  (declare-const v8 (_ BitVec 1))
  (declare-const v9 (_ BitVec 1))
  (declare-const v10 (_ BitVec 1))
  (declare-const v11 (_ BitVec 1))
  (declare-const v12 (_ BitVec 2))
  (declare-const v13 (_ BitVec 1))
  (declare-const v14 (_ BitVec 1))
  (declare-const v15 (_ BitVec 1))
  (declare-const v16 (_ BitVec 1))
  (declare-const v17 (_ BitVec 5))
  (declare-const v18 (_ BitVec 1))
  (declare-const v19 (_ BitVec 1))
  (declare-const v20 (_ BitVec 1))
  (declare-const v21 (_ BitVec 1))
  (declare-const v22 (_ BitVec 4))
  (declare-const v23 (_ BitVec 1))
  (declare-const v24 (_ BitVec 1))
  (declare-const v25 (_ BitVec 1))
  (declare-const v26 (_ BitVec 64))
  (define-const v27 (bvor v26 #x000000000000ffff))
  (declare-const v28 (_ BitVec 64))
  (declare-const v29 (_ BitVec 64))
  (define-const v30 (eq v6 #b0))
  (assert v30)
  (declare-const v31 (_ BitVec 64))
  (define-const v32 ((_ extract 63 0) v31))
  (declare-const v33 (_ BitVec 4))
  (declare-const v34 (_ BitVec 1))
  (define-const v35 ((_ zero_extend 64) v32))
  (define-const v36 (bvadd v35 #x0000000000000000ffffffffffffffef))
  (define-const v37 (bvadd v36 #x00000000000000000000000000000001))
  (define-const v38 ((_ sign_extend 64) v32))
  (define-const v39 (bvadd v38 #xffffffffffffffffffffffffffffffef))
  (define-const v40 (bvadd v39 #x00000000000000000000000000000001))
  (define-const v41 ((_ extract 63 0) v37))
  (define-const v42 ((_ extract 0 0) (bvlshr v41 ((_ extract 63 0) #x0000000000000000000000000000003f))))
  (define-const v43 (bvor (bvand #b0 (bvshl #b0 ((_ extract 0 0) #x0000000000000000))) (bvshl ((_ zero_extend 0) v42) ((_ extract 0 0) #x0000000000000000))))
  (define-const v44 (eq v41 #x0000000000000000))
  (assert (not v44))
  (define-const v45 ((_ zero_extend 64) v41))
  (define-const v46 (eq v45 v37))
  (assert v46)
  (define-const v47 ((_ sign_extend 64) v41))
  (define-const v48 (eq v47 v40))
  (assert v48)
  (define-const v49 (concat v43 #b0))
  (define-const v50 (concat v49 #b0))
  (define-const v51 (concat v50 #b0))
  (declare-const v52 (_ BitVec 4))
  (define-const v53 (eq v6 #b0))
  (assert v53)
  (define-const v54 v41))

(events
  (write-reg |SEE| (_ bv-1 128))
  (write-reg |PSTATE| (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |__v85_implemented| false)
  (read-reg |SP_EL2| nil v26)
  (write-reg |SP_EL2| v27)
  (read-reg |SEE| nil (_ bv-1 128))
  (write-reg |SEE| (_ bv1393 128))
  (write-reg |__unconditional| true)
  (read-reg |__v85_implemented| nil false)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |SP_EL0| nil v31)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |SP_EL0| v54))
WriteReg(282354, I128(-1))
Smt(DeclareConst(0, BitVec(1)))
Smt(DeclareConst(1, BitVec(2)))
Smt(DeclareConst(2, BitVec(8)))
Smt(DeclareConst(3, BitVec(1)))
Smt(DeclareConst(4, BitVec(1)))
Smt(DeclareConst(5, BitVec(1)))
Smt(DeclareConst(6, BitVec(1)))
Smt(DeclareConst(7, BitVec(1)))
Smt(DeclareConst(8, BitVec(1)))
Smt(DeclareConst(9, BitVec(1)))
Smt(DeclareConst(10, BitVec(1)))
Smt(DeclareConst(11, BitVec(1)))
Smt(DeclareConst(12, BitVec(2)))
Smt(DeclareConst(13, BitVec(1)))
Smt(DeclareConst(14, BitVec(1)))
Smt(DeclareConst(15, BitVec(1)))
Smt(DeclareConst(16, BitVec(1)))
Smt(DeclareConst(17, BitVec(5)))
Smt(DeclareConst(18, BitVec(1)))
Smt(DeclareConst(19, BitVec(1)))
Smt(DeclareConst(20, BitVec(1)))
Smt(DeclareConst(21, BitVec(1)))
Smt(DeclareConst(22, BitVec(4)))
Smt(DeclareConst(23, BitVec(1)))
Smt(DeclareConst(24, BitVec(1)))
Smt(DeclareConst(25, BitVec(1)))
WriteReg(1720, Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
WriteReg(1508, Bool(false))
Smt(DeclareConst(26, BitVec(64)))
ReadReg(25391, [], Symbolic(26))
Smt(DefineConst(27, Bvor(Var(26), Bits64(65535, 64))))
WriteReg(25391, Symbolic(27))
ReadReg(282354, [], I128(-1))
WriteReg(282354, I128(1393))
WriteReg(25124, Bool(true))
Smt(DeclareConst(28, BitVec(64)))
ReadReg(5, [], Bool(false))
ReadReg(1508, [], Bool(false))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(29, BitVec(64)))
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Smt(DefineConst(30, Eq(Var(6), Bits64(0, 1))))
Smt(Assert(Var(30)))
Smt(DeclareConst(31, BitVec(64)))
ReadReg(25393, [], Symbolic(31))
Smt(DefineConst(32, Extract(63, 0, Var(31))))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(33, BitVec(4)))
Smt(DeclareConst(34, BitVec(1)))
Smt(DefineConst(35, ZeroExtend(64, Var(32))))
Smt(DefineConst(36, Bvadd(Var(35), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(37, Bvadd(Var(36), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(38, SignExtend(64, Var(32))))
Smt(DefineConst(39, Bvadd(Var(38), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]))))
Smt(DefineConst(40, Bvadd(Var(39), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(41, Extract(63, 0, Var(37))))
Smt(DefineConst(42, Extract(0, 0, Bvlshr(Var(41), Extract(63, 0, Bits([true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))))
Smt(DefineConst(43, Bvor(Bvand(Bits64(0, 1), Bvshl(Bits([false]), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))), Bvshl(ZeroExtend(0, Var(42)), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))))
Smt(DefineConst(44, Eq(Var(41), Bits64(0, 64))))
Smt(Assert(Not(Var(44))))
Smt(DefineConst(45, ZeroExtend(64, Var(41))))
Smt(DefineConst(46, Eq(Var(45), Var(37))))
Assert(Not(Var(46)))
DefineConst(47, SignExtend(64, Var(41)))
DefineConst(48, Eq(Var(47), Var(40)))
Assert(Var(48))
DefineConst(49, Concat(Var(43), Bits64(0, 1)))
DefineConst(50, Concat(Var(49), Bits64(1, 1)))
DefineConst(51, Concat(Var(50), Bits64(0, 1)))
DeclareConst(52, BitVec(4))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
DefineConst(53, Eq(Var(6), Bits64(0, 1)))
Assert(Var(53))
DefineConst(54, Var(41))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register write zSP_EL0 (25393) = Symbolic(54)
WriteReg(25393, Symbolic(54))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
(formula
  (declare-const v0 (_ BitVec 1))
  (declare-const v1 (_ BitVec 2))
  (declare-const v2 (_ BitVec 8))
  (declare-const v3 (_ BitVec 1))
  (declare-const v4 (_ BitVec 1))
  (declare-const v5 (_ BitVec 1))
  (declare-const v6 (_ BitVec 1))
  (declare-const v7 (_ BitVec 1))
  (declare-const v8 (_ BitVec 1))
  (declare-const v9 (_ BitVec 1))
  (declare-const v10 (_ BitVec 1))
  (declare-const v11 (_ BitVec 1))
  (declare-const v12 (_ BitVec 2))
  (declare-const v13 (_ BitVec 1))
  (declare-const v14 (_ BitVec 1))
  (declare-const v15 (_ BitVec 1))
  (declare-const v16 (_ BitVec 1))
  (declare-const v17 (_ BitVec 5))
  (declare-const v18 (_ BitVec 1))
  (declare-const v19 (_ BitVec 1))
  (declare-const v20 (_ BitVec 1))
  (declare-const v21 (_ BitVec 1))
  (declare-const v22 (_ BitVec 4))
  (declare-const v23 (_ BitVec 1))
  (declare-const v24 (_ BitVec 1))
  (declare-const v25 (_ BitVec 1))
  (declare-const v26 (_ BitVec 64))
  (define-const v27 (bvor v26 #x000000000000ffff))
  (declare-const v28 (_ BitVec 64))
  (declare-const v29 (_ BitVec 64))
  (define-const v30 (eq v6 #b0))
  (assert v30)
  (declare-const v31 (_ BitVec 64))
  (define-const v32 ((_ extract 63 0) v31))
  (declare-const v33 (_ BitVec 4))
  (declare-const v34 (_ BitVec 1))
  (define-const v35 ((_ zero_extend 64) v32))
  (define-const v36 (bvadd v35 #x0000000000000000ffffffffffffffef))
  (define-const v37 (bvadd v36 #x00000000000000000000000000000001))
  (define-const v38 ((_ sign_extend 64) v32))
  (define-const v39 (bvadd v38 #xffffffffffffffffffffffffffffffef))
  (define-const v40 (bvadd v39 #x00000000000000000000000000000001))
  (define-const v41 ((_ extract 63 0) v37))
  (define-const v42 ((_ extract 0 0) (bvlshr v41 ((_ extract 63 0) #x0000000000000000000000000000003f))))
  (define-const v43 (bvor (bvand #b0 (bvshl #b0 ((_ extract 0 0) #x0000000000000000))) (bvshl ((_ zero_extend 0) v42) ((_ extract 0 0) #x0000000000000000))))
  (define-const v44 (eq v41 #x0000000000000000))
  (assert (not v44))
  (define-const v45 ((_ zero_extend 64) v41))
  (define-const v46 (eq v45 v37))
  (assert (not v46))
  (define-const v47 ((_ sign_extend 64) v41))
  (define-const v48 (eq v47 v40))
  (assert v48)
  (define-const v49 (concat v43 #b0))
  (define-const v50 (concat v49 #b1))
  (define-const v51 (concat v50 #b0))
  (declare-const v52 (_ BitVec 4))
  (define-const v53 (eq v6 #b0))
  (assert v53)
  (define-const v54 v41))

(events
  (write-reg |SEE| (_ bv-1 128))
  (write-reg |PSTATE| (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |__v85_implemented| false)
  (read-reg |SP_EL2| nil v26)
  (write-reg |SP_EL2| v27)
  (read-reg |SEE| nil (_ bv-1 128))
  (write-reg |SEE| (_ bv1393 128))
  (write-reg |__unconditional| true)
  (read-reg |__v85_implemented| nil false)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |SP_EL0| nil v31)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |SP_EL0| v54))
WriteReg(282354, I128(-1))
Smt(DeclareConst(0, BitVec(1)))
Smt(DeclareConst(1, BitVec(2)))
Smt(DeclareConst(2, BitVec(8)))
Smt(DeclareConst(3, BitVec(1)))
Smt(DeclareConst(4, BitVec(1)))
Smt(DeclareConst(5, BitVec(1)))
Smt(DeclareConst(6, BitVec(1)))
Smt(DeclareConst(7, BitVec(1)))
Smt(DeclareConst(8, BitVec(1)))
Smt(DeclareConst(9, BitVec(1)))
Smt(DeclareConst(10, BitVec(1)))
Smt(DeclareConst(11, BitVec(1)))
Smt(DeclareConst(12, BitVec(2)))
Smt(DeclareConst(13, BitVec(1)))
Smt(DeclareConst(14, BitVec(1)))
Smt(DeclareConst(15, BitVec(1)))
Smt(DeclareConst(16, BitVec(1)))
Smt(DeclareConst(17, BitVec(5)))
Smt(DeclareConst(18, BitVec(1)))
Smt(DeclareConst(19, BitVec(1)))
Smt(DeclareConst(20, BitVec(1)))
Smt(DeclareConst(21, BitVec(1)))
Smt(DeclareConst(22, BitVec(4)))
Smt(DeclareConst(23, BitVec(1)))
Smt(DeclareConst(24, BitVec(1)))
Smt(DeclareConst(25, BitVec(1)))
WriteReg(1720, Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
WriteReg(1508, Bool(false))
Smt(DeclareConst(26, BitVec(64)))
ReadReg(25391, [], Symbolic(26))
Smt(DefineConst(27, Bvor(Var(26), Bits64(65535, 64))))
WriteReg(25391, Symbolic(27))
ReadReg(282354, [], I128(-1))
WriteReg(282354, I128(1393))
WriteReg(25124, Bool(true))
Smt(DeclareConst(28, BitVec(64)))
ReadReg(5, [], Bool(false))
ReadReg(1508, [], Bool(false))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(29, BitVec(64)))
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Smt(DefineConst(30, Eq(Var(6), Bits64(0, 1))))
Smt(Assert(Var(30)))
Smt(DeclareConst(31, BitVec(64)))
ReadReg(25393, [], Symbolic(31))
Smt(DefineConst(32, Extract(63, 0, Var(31))))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(33, BitVec(4)))
Smt(DeclareConst(34, BitVec(1)))
Smt(DefineConst(35, ZeroExtend(64, Var(32))))
Smt(DefineConst(36, Bvadd(Var(35), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(37, Bvadd(Var(36), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(38, SignExtend(64, Var(32))))
Smt(DefineConst(39, Bvadd(Var(38), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]))))
Smt(DefineConst(40, Bvadd(Var(39), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))
Smt(DefineConst(41, Extract(63, 0, Var(37))))
Smt(DefineConst(42, Extract(0, 0, Bvlshr(Var(41), Extract(63, 0, Bits([true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))))
Smt(DefineConst(43, Bvor(Bvand(Bits64(0, 1), Bvshl(Bits([false]), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))), Bvshl(ZeroExtend(0, Var(42)), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]))))))
Smt(DefineConst(44, Eq(Var(41), Bits64(0, 64))))
Smt(Assert(Not(Var(44))))
Smt(DefineConst(45, ZeroExtend(64, Var(41))))
Smt(DefineConst(46, Eq(Var(45), Var(37))))
Smt(Assert(Not(Var(46))))
Smt(DefineConst(47, SignExtend(64, Var(41))))
Smt(DefineConst(48, Eq(Var(47), Var(40))))
Assert(Not(Var(48)))
DefineConst(49, Concat(Var(43), Bits64(0, 1)))
DefineConst(50, Concat(Var(49), Bits64(1, 1)))
DefineConst(51, Concat(Var(50), Bits64(1, 1)))
DeclareConst(52, BitVec(4))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
DefineConst(53, Eq(Var(6), Bits64(0, 1)))
Assert(Var(53))
DefineConst(54, Var(41))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register write zSP_EL0 (25393) = Symbolic(54)
WriteReg(25393, Symbolic(54))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
(formula
  (declare-const v0 (_ BitVec 1))
  (declare-const v1 (_ BitVec 2))
  (declare-const v2 (_ BitVec 8))
  (declare-const v3 (_ BitVec 1))
  (declare-const v4 (_ BitVec 1))
  (declare-const v5 (_ BitVec 1))
  (declare-const v6 (_ BitVec 1))
  (declare-const v7 (_ BitVec 1))
  (declare-const v8 (_ BitVec 1))
  (declare-const v9 (_ BitVec 1))
  (declare-const v10 (_ BitVec 1))
  (declare-const v11 (_ BitVec 1))
  (declare-const v12 (_ BitVec 2))
  (declare-const v13 (_ BitVec 1))
  (declare-const v14 (_ BitVec 1))
  (declare-const v15 (_ BitVec 1))
  (declare-const v16 (_ BitVec 1))
  (declare-const v17 (_ BitVec 5))
  (declare-const v18 (_ BitVec 1))
  (declare-const v19 (_ BitVec 1))
  (declare-const v20 (_ BitVec 1))
  (declare-const v21 (_ BitVec 1))
  (declare-const v22 (_ BitVec 4))
  (declare-const v23 (_ BitVec 1))
  (declare-const v24 (_ BitVec 1))
  (declare-const v25 (_ BitVec 1))
  (declare-const v26 (_ BitVec 64))
  (define-const v27 (bvor v26 #x000000000000ffff))
  (declare-const v28 (_ BitVec 64))
  (declare-const v29 (_ BitVec 64))
  (define-const v30 (eq v6 #b0))
  (assert v30)
  (declare-const v31 (_ BitVec 64))
  (define-const v32 ((_ extract 63 0) v31))
  (declare-const v33 (_ BitVec 4))
  (declare-const v34 (_ BitVec 1))
  (define-const v35 ((_ zero_extend 64) v32))
  (define-const v36 (bvadd v35 #x0000000000000000ffffffffffffffef))
  (define-const v37 (bvadd v36 #x00000000000000000000000000000001))
  (define-const v38 ((_ sign_extend 64) v32))
  (define-const v39 (bvadd v38 #xffffffffffffffffffffffffffffffef))
  (define-const v40 (bvadd v39 #x00000000000000000000000000000001))
  (define-const v41 ((_ extract 63 0) v37))
  (define-const v42 ((_ extract 0 0) (bvlshr v41 ((_ extract 63 0) #x0000000000000000000000000000003f))))
  (define-const v43 (bvor (bvand #b0 (bvshl #b0 ((_ extract 0 0) #x0000000000000000))) (bvshl ((_ zero_extend 0) v42) ((_ extract 0 0) #x0000000000000000))))
  (define-const v44 (eq v41 #x0000000000000000))
  (assert (not v44))
  (define-const v45 ((_ zero_extend 64) v41))
  (define-const v46 (eq v45 v37))
  (assert (not v46))
  (define-const v47 ((_ sign_extend 64) v41))
  (define-const v48 (eq v47 v40))
  (assert (not v48))
  (define-const v49 (concat v43 #b0))
  (define-const v50 (concat v49 #b1))
  (define-const v51 (concat v50 #b1))
  (declare-const v52 (_ BitVec 4))
  (define-const v53 (eq v6 #b0))
  (assert v53)
  (define-const v54 v41))

(events
  (write-reg |SEE| (_ bv-1 128))
  (write-reg |PSTATE| (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |__v85_implemented| false)
  (read-reg |SP_EL2| nil v26)
  (write-reg |SP_EL2| v27)
  (read-reg |SEE| nil (_ bv-1 128))
  (write-reg |SEE| (_ bv1393 128))
  (write-reg |__unconditional| true)
  (read-reg |__v85_implemented| nil false)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |SP_EL0| nil v31)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |SP_EL0| v54))
WriteReg(282354, I128(-1))
Smt(DeclareConst(0, BitVec(1)))
Smt(DeclareConst(1, BitVec(2)))
Smt(DeclareConst(2, BitVec(8)))
Smt(DeclareConst(3, BitVec(1)))
Smt(DeclareConst(4, BitVec(1)))
Smt(DeclareConst(5, BitVec(1)))
Smt(DeclareConst(6, BitVec(1)))
Smt(DeclareConst(7, BitVec(1)))
Smt(DeclareConst(8, BitVec(1)))
Smt(DeclareConst(9, BitVec(1)))
Smt(DeclareConst(10, BitVec(1)))
Smt(DeclareConst(11, BitVec(1)))
Smt(DeclareConst(12, BitVec(2)))
Smt(DeclareConst(13, BitVec(1)))
Smt(DeclareConst(14, BitVec(1)))
Smt(DeclareConst(15, BitVec(1)))
Smt(DeclareConst(16, BitVec(1)))
Smt(DeclareConst(17, BitVec(5)))
Smt(DeclareConst(18, BitVec(1)))
Smt(DeclareConst(19, BitVec(1)))
Smt(DeclareConst(20, BitVec(1)))
Smt(DeclareConst(21, BitVec(1)))
Smt(DeclareConst(22, BitVec(4)))
Smt(DeclareConst(23, BitVec(1)))
Smt(DeclareConst(24, BitVec(1)))
Smt(DeclareConst(25, BitVec(1)))
WriteReg(1720, Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
WriteReg(1508, Bool(false))
Smt(DeclareConst(26, BitVec(64)))
ReadReg(25391, [], Symbolic(26))
Smt(DefineConst(27, Bvor(Var(26), Bits64(65535, 64))))
WriteReg(25391, Symbolic(27))
ReadReg(282354, [], I128(-1))
WriteReg(282354, I128(1393))
WriteReg(25124, Bool(true))
Smt(DeclareConst(28, BitVec(64)))
ReadReg(5, [], Bool(false))
ReadReg(1508, [], Bool(false))
ReadReg(5, [], Bool(false))
Smt(DeclareConst(29, BitVec(64)))
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Smt(DefineConst(30, Eq(Var(6), Bits64(0, 1))))
Assert(Not(Var(30)))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(164)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Register read zEL0 (2336) = Bits(Sbits { length: 2, bits: 0 })
ReadReg(2336, [], Bits(Sbits { length: 2, bits: 0 }))
Register read zEL1 (2334) = Bits(Sbits { length: 2, bits: 1 })
ReadReg(2334, [], Bits(Sbits { length: 2, bits: 1 }))
Register read zEL2 (2332) = Bits(Sbits { length: 2, bits: 2 })
ReadReg(2332, [], Bits(Sbits { length: 2, bits: 2 }))
Register read zSP_EL2 (25391) = Symbolic(27)
ReadReg(25391, [], Symbolic(27))
DefineConst(31, Extract(63, 0, Var(27)))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
DeclareConst(32, BitVec(4))
DeclareConst(33, BitVec(1))
DefineConst(34, ZeroExtend(64, Var(31)))
DefineConst(35, Bvadd(Var(34), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))
DefineConst(36, Bvadd(Var(35), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))
DefineConst(37, SignExtend(64, Var(31)))
DefineConst(38, Bvadd(Var(37), Bits([true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true])))
DefineConst(39, Bvadd(Var(38), Bits([true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))
DefineConst(40, Extract(63, 0, Var(36)))
DefineConst(41, Extract(0, 0, Bvlshr(Var(40), Extract(63, 0, Bits([true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))))
DefineConst(42, Bvor(Bvand(Bits64(0, 1), Bvshl(Bits([false]), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))), Bvshl(ZeroExtend(0, Var(41)), Extract(0, 0, Bits([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])))))
DefineConst(43, Eq(Var(40), Bits64(0, 64)))
Assert(Not(Var(43)))
DefineConst(44, ZeroExtend(64, Var(40)))
DefineConst(45, Eq(Var(44), Var(36)))
Assert(Not(Var(45)))
DefineConst(46, SignExtend(64, Var(40)))
DefineConst(47, Eq(Var(46), Var(39)))
Assert(Var(47))
DefineConst(48, Concat(Var(42), Bits64(0, 1)))
DefineConst(49, Concat(Var(48), Bits64(1, 1)))
DefineConst(50, Concat(Var(49), Bits64(0, 1)))
DeclareConst(51, BitVec(4))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(175)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
DefineConst(52, Eq(Var(6), Bits64(0, 1)))
Assert(Not(Var(52)))
Register read zPSTATE (1720) = Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)})
ReadReg(1720, [Field(164)], Struct({180: Symbolic(20), 178: Symbolic(8), 179: Symbolic(19), 166: Symbolic(22), 164: Bits(Sbits { length: 2, bits: 2 }), 165: Symbolic(11), 172: Symbolic(16), 171: Symbolic(17), 170: Symbolic(24), 182: Symbolic(21), 168: Symbolic(3), 176: Symbolic(9), 181: Symbolic(4), 163: Symbolic(13), 175: Symbolic(6), 162: Symbolic(5), 174: Symbolic(23), 159: Symbolic(12), 161: Symbolic(0), 160: Symbolic(15), 169: Symbolic(2), 158: Symbolic(18), 173: Symbolic(25), 183: Symbolic(7), 177: Symbolic(10), 167: Symbolic(14)}))
Register read zEL0 (2336) = Bits(Sbits { length: 2, bits: 0 })
ReadReg(2336, [], Bits(Sbits { length: 2, bits: 0 }))
Register read zEL1 (2334) = Bits(Sbits { length: 2, bits: 1 })
ReadReg(2334, [], Bits(Sbits { length: 2, bits: 1 }))
Register read zEL2 (2332) = Bits(Sbits { length: 2, bits: 2 })
ReadReg(2332, [], Bits(Sbits { length: 2, bits: 2 }))
DefineConst(53, Var(40))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register write zSP_EL2 (25391) = Symbolic(53)
WriteReg(25391, Symbolic(53))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
Register read have_exception (5) = Bool(false)
ReadReg(5, [], Bool(false))
(formula
  (declare-const v0 (_ BitVec 1))
  (declare-const v1 (_ BitVec 2))
  (declare-const v2 (_ BitVec 8))
  (declare-const v3 (_ BitVec 1))
  (declare-const v4 (_ BitVec 1))
  (declare-const v5 (_ BitVec 1))
  (declare-const v6 (_ BitVec 1))
  (declare-const v7 (_ BitVec 1))
  (declare-const v8 (_ BitVec 1))
  (declare-const v9 (_ BitVec 1))
  (declare-const v10 (_ BitVec 1))
  (declare-const v11 (_ BitVec 1))
  (declare-const v12 (_ BitVec 2))
  (declare-const v13 (_ BitVec 1))
  (declare-const v14 (_ BitVec 1))
  (declare-const v15 (_ BitVec 1))
  (declare-const v16 (_ BitVec 1))
  (declare-const v17 (_ BitVec 5))
  (declare-const v18 (_ BitVec 1))
  (declare-const v19 (_ BitVec 1))
  (declare-const v20 (_ BitVec 1))
  (declare-const v21 (_ BitVec 1))
  (declare-const v22 (_ BitVec 4))
  (declare-const v23 (_ BitVec 1))
  (declare-const v24 (_ BitVec 1))
  (declare-const v25 (_ BitVec 1))
  (declare-const v26 (_ BitVec 64))
  (define-const v27 (bvor v26 #x000000000000ffff))
  (declare-const v28 (_ BitVec 64))
  (declare-const v29 (_ BitVec 64))
  (define-const v30 (eq v6 #b0))
  (assert (not v30))
  (define-const v31 ((_ extract 63 0) v27))
  (declare-const v32 (_ BitVec 4))
  (declare-const v33 (_ BitVec 1))
  (define-const v34 ((_ zero_extend 64) v31))
  (define-const v35 (bvadd v34 #x0000000000000000ffffffffffffffef))
  (define-const v36 (bvadd v35 #x00000000000000000000000000000001))
  (define-const v37 ((_ sign_extend 64) v31))
  (define-const v38 (bvadd v37 #xffffffffffffffffffffffffffffffef))
  (define-const v39 (bvadd v38 #x00000000000000000000000000000001))
  (define-const v40 ((_ extract 63 0) v36))
  (define-const v41 ((_ extract 0 0) (bvlshr v40 ((_ extract 63 0) #x0000000000000000000000000000003f))))
  (define-const v42 (bvor (bvand #b0 (bvshl #b0 ((_ extract 0 0) #x0000000000000000))) (bvshl ((_ zero_extend 0) v41) ((_ extract 0 0) #x0000000000000000))))
  (define-const v43 (eq v40 #x0000000000000000))
  (assert (not v43))
  (define-const v44 ((_ zero_extend 64) v40))
  (define-const v45 (eq v44 v36))
  (assert (not v45))
  (define-const v46 ((_ sign_extend 64) v40))
  (define-const v47 (eq v46 v39))
  (assert v47)
  (define-const v48 (concat v42 #b0))
  (define-const v49 (concat v48 #b1))
  (define-const v50 (concat v49 #b0))
  (declare-const v51 (_ BitVec 4))
  (define-const v52 (eq v6 #b0))
  (assert (not v52))
  (define-const v53 v40))

(events
  (write-reg |SEE| (_ bv-1 128))
  (write-reg |PSTATE| (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (write-reg |__v85_implemented| false)
  (read-reg |SP_EL2| nil v26)
  (write-reg |SP_EL2| v27)
  (read-reg |SEE| nil (_ bv-1 128))
  (write-reg |SEE| (_ bv1393 128))
  (write-reg |__unconditional| true)
  (read-reg |__v85_implemented| nil false)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |PSTATE| (_ field |EL|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |EL0| nil #b00)
  (read-reg |EL1| nil #b01)
  (read-reg |EL2| nil #b10)
  (read-reg |SP_EL2| nil v27)
  (read-reg |PSTATE| (_ field |SP|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |PSTATE| (_ field |EL|) (_ struct (|UAO| v20) (|T| v8) (|TCO| v19) (|GE| v22) (|EL| #b10) (|F| v11) (|N| v16) (|M| v17) (|J| v24) (|Z| v21) (|IL| v3) (|SS| v9) (|V| v4) (|E| v13) (|SP| v6) (|DIT| v5) (|Q| v23) (|BTYPE| v12) (|D| v0) (|C| v15) (|IT| v2) (|A| v18) (|PAN| v25) (|nRW| v7) (|SSBS| v10) (|I| v14)))
  (read-reg |EL0| nil #b00)
  (read-reg |EL1| nil #b01)
  (read-reg |EL2| nil #b10)
  (write-reg |SP_EL2| v53))
ok
