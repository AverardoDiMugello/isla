(* generated by Ott 0.30 from: smt_lang.ott *)
{
open Smt_lang_parser
exception Error of string
}

rule token = parse
| [' ' '\t']
    { token lexbuf }
| '
'
   { Lexing.new_line lexbuf; token lexbuf }
| "//" [^'\n']* '\n'
    { Lexing.new_line lexbuf; token lexbuf }
| eof
    { EOF }
| "valu'',"
    { VALU_APOSTROPHE_APOSTROPHE_COMMA }
| "write_kind:"
    { WRITE_UNDERSCORE_KIND_COLON }
| "read_kind:"
    { READ_UNDERSCORE_KIND_COLON }
| "field_name"
    { FIELD_UNDERSCORE_NAME }
| "valu',"
    { VALU_APOSTROPHE_COMMA }
| "bvi128"
    { BVI_ONE_TWO_EIGHT }
| "(_"
    { LPAREN_UNDERSCORE }
| "address:"
    { ADDRESS_COLON }
| "bvi64"
    { BVI_SIX_FOUR }
| "DeclareConst"
    { DECLARECONST }
| "?"
    { QUESTIONMARK }
| "valuue:"
    { VALUUE_COLON }
| "bytes:"
    { BYTES_COLON }
| "DefineConst"
    { DEFINECONST }
| "data:"
    { DATA_COLON }
| "signExtend"
    { SIGNEXTEND }
| "valu,"
    { VALU_COMMA }
| "zeroExtend"
    { ZEROEXTEND }
| "bvredand"
    { BVREDAND }
| "WriteMem"
    { WRITEMEM }
| "WriteReg"
    { WRITEREG }
| "bvredor"
    { BVREDOR }
| "extract"
    { EXTRACT }
| "ReadMem"
    { READMEM }
| "ReadReg"
    { READREG }
| "Assert"
    { ASSERT }
| "BitVec"
    { BITVEC }
| "bvashr"
    { BVASHR }
| "bvlshr"
    { BVLSHR }
| "bvnand"
    { BVNAND }
| "bvsdiv"
    { BVSDIV }
| "bvsmod"
    { BVSMOD }
| "bvsrem"
    { BVSREM }
| "bvudiv"
    { BVUDIV }
| "bvurem"
    { BVUREM }
| "bvxnor"
    { BVXNOR }
| "concat"
    { CONCAT }
| "{"
    { LBRACE }
| "["
    { LBRACK }
| "("
    { LPAREN }
| "poison"
    { POISON }
| "}"
    { RBRACE }
| "]"
    { RBRACK }
| ")"
    { RPAREN }
| "Struct"
    { STRUCT }
| "bvadd"
    { BVADD }
| "bvand"
    { BVAND }
| "bvmul"
    { BVMUL }
| "bvneg"
    { BVNEG }
| "bvnor"
    { BVNOR }
| "bvnot"
    { BVNOT }
| "bvsge"
    { BVSGE }
| "bvsgt"
    { BVSGT }
| "bvshl"
    { BVSHL }
| "bvsle"
    { BVSLE }
| "bvslt"
    { BVSLT }
| "bvsub"
    { BVSUB }
| "bvuge"
    { BVUGE }
| "bvugt"
    { BVUGT }
| "bvule"
    { BVULE }
| "bvult"
    { BVULT }
| "bvxor"
    { BVXOR }
| ":"
    { COLON }
| ","
    { COMMA }
| "false"
    { FALSE }
| "field"
    { FIELD }
| "Bool"
    { BOOL }
| "bvor"
    { BVOR }
| "list"
    { LIST }
| "true"
    { TRUE }
| "unit"
    { UNIT }
| "and"
    { AND }
| "|"
    { BAR }
| "ite"
    { ITE }
| "neq"
    { NEQ }
| "not"
    { NOT }
| "Smt"
    { SMT }
| "vec"
    { VEC }
| "bv"
    { BV }
| "eq"
    { EQ }
| "or"
    { OR }
| "s"
    { S }
| 'v'['0'-'9']* as vu32
    { VU_THREE_TWO (vu32) }
| ['0'-'9']* as u32
    { U_THREE_TWO (int_of_string u32) }
| ['0'-'9']* as u64
    { U_SIX_FOUR (u64) }
| _
    { raise (Error (Printf.sprintf "At offset %d: unexpected character.\n" (Lexing.lexeme_start lexbuf))) }


{
}

