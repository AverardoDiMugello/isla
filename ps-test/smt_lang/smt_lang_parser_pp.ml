(* generated by Ott 0.30 from: smt_lang.ott *)
open PPrintEngine
open PPrintCombinators
open Smt_lang_ast

let rec pp_raw_u32 x = string (string_of_int x)

and pp_raw_vu32 x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_u64 x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_bvi x = string (x)

and pp_raw_bv x = string (x)

and pp_raw_name x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_valu x = match x with
| Val_Symbolic(vu32) -> string "Val_Symbolic" ^^ string "(" ^^ pp_raw_vu32 vu32 ^^ string ")"
| Val_I64(bvi) -> string "Val_I64" ^^ string "(" ^^ pp_raw_bvi bvi ^^ string ")"
| Val_I128(bvi) -> string "Val_I128" ^^ string "(" ^^ pp_raw_bvi bvi ^^ string ")"
| Val_Bool(bool) -> string "Val_Bool" ^^ string "(" ^^ pp_raw_bool bool ^^ string ")"
| Val_Bits(bv) -> string "Val_Bits" ^^ string "(" ^^ pp_raw_bv bv ^^ string ")"
| Val_String -> string "Val_String"
| Val_Unit -> string "Val_Unit"
| Val_Vector(valu0) -> string "Val_Vector" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (valu0) -> string "(" ^^ pp_raw_valu valu0 ^^ string ")") valu0) ^^ string "]" ^^ string ")"
| Val_List(valu0) -> string "Val_List" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (valu0) -> string "(" ^^ pp_raw_valu valu0 ^^ string ")") valu0) ^^ string "]" ^^ string ")"
| Val_Struct(struct_element0) -> string "Val_Struct" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (struct_element0) -> string "(" ^^ pp_raw_struct_element struct_element0 ^^ string ")") struct_element0) ^^ string "]" ^^ string ")"
| Val_Poison -> string "Val_Poison"

and pp_raw_struct_element x = match x with
| Struct_elem(name,valu) -> string "Struct_elem" ^^ string "(" ^^ pp_raw_name name ^^ string "," ^^ pp_raw_valu valu ^^ string ")"

and pp_raw_ty x = match x with
| Ty_Bool -> string "Ty_Bool"
| Ty_BitVec(u32) -> string "Ty_BitVec" ^^ string "(" ^^ pp_raw_u32 u32 ^^ string ")"

and pp_raw_bool x = match x with
| True -> string "True"
| False -> string "False"

and pp_raw_exp x = match x with
| Var(vu32) -> string "Var" ^^ string "(" ^^ pp_raw_vu32 vu32 ^^ string ")"
| Bits(bv) -> string "Bits" ^^ string "(" ^^ pp_raw_bv bv ^^ string ")"
| Bool(bool) -> string "Bool" ^^ string "(" ^^ pp_raw_bool bool ^^ string ")"
| Eq(exp,exp_prime) -> string "Eq" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Neq(exp,exp_prime) -> string "Neq" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| And(exp,exp_prime) -> string "And" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Or(exp,exp_prime) -> string "Or" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Not(exp) -> string "Not" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| Bvnot(exp) -> string "Bvnot" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| Bvredand(exp) -> string "Bvredand" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| Bvredor(exp) -> string "Bvredor" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| Bvand(exp,exp_prime) -> string "Bvand" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvor(exp,exp_prime) -> string "Bvor" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvxor(exp,exp_prime) -> string "Bvxor" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvnand(exp,exp_prime) -> string "Bvnand" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvnor(exp,exp_prime) -> string "Bvnor" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvxnor(exp,exp_prime) -> string "Bvxnor" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvneg(exp) -> string "Bvneg" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| Bvadd(exp,exp_prime) -> string "Bvadd" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsub(exp,exp_prime) -> string "Bvsub" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvmul(exp,exp_prime) -> string "Bvmul" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvudiv(exp,exp_prime) -> string "Bvudiv" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsdiv(exp,exp_prime) -> string "Bvsdiv" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvurem(exp,exp_prime) -> string "Bvurem" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsrem(exp,exp_prime) -> string "Bvsrem" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsmod(exp,exp_prime) -> string "Bvsmod" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvult(exp,exp_prime) -> string "Bvult" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvslt(exp,exp_prime) -> string "Bvslt" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvule(exp,exp_prime) -> string "Bvule" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsle(exp,exp_prime) -> string "Bvsle" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvuge(exp,exp_prime) -> string "Bvuge" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsge(exp,exp_prime) -> string "Bvsge" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvugt(exp,exp_prime) -> string "Bvugt" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvsgt(exp,exp_prime) -> string "Bvsgt" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Extract(u32,u32_prime,exp_prime_prime) -> string "Extract" ^^ string "(" ^^ pp_raw_u32 u32 ^^ string "," ^^ pp_raw_u32 u32_prime ^^ string "," ^^ pp_raw_exp exp_prime_prime ^^ string ")"
| ZeroExtend(u32,exp_prime) -> string "ZeroExtend" ^^ string "(" ^^ pp_raw_u32 u32 ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| SignExtend(u32,exp_prime) -> string "SignExtend" ^^ string "(" ^^ pp_raw_u32 u32 ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvshl(exp,exp_prime) -> string "Bvshl" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvlshr(exp,exp_prime) -> string "Bvlshr" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Bvashr(exp,exp_prime) -> string "Bvashr" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Concat(exp,exp_prime) -> string "Concat" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| Ite(exp,exp_prime,exp_prime_prime) -> string "Ite" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string "," ^^ pp_raw_exp exp_prime_prime ^^ string ")"

and pp_raw_def x = match x with
| DeclareConst(vu32,ty) -> string "DeclareConst" ^^ string "(" ^^ pp_raw_vu32 vu32 ^^ string "," ^^ pp_raw_ty ty ^^ string ")"
| DefineConst(vu32,exp) -> string "DefineConst" ^^ string "(" ^^ pp_raw_vu32 vu32 ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| Assert(exp) -> string "Assert" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_accessor x = match x with
| Field(name) -> string "Field" ^^ string "(" ^^ pp_raw_name name ^^ string ")"

and pp_raw_accessor_list x = match x with
| Nil -> string "Nil"
| Cons(accessor0) -> string "Cons" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (accessor0) -> string "(" ^^ pp_raw_accessor accessor0 ^^ string ")") accessor0) ^^ string "]" ^^ string ")"

and pp_raw_event x = match x with
| ReadReg(name,accessor_list,valu) -> string "ReadReg" ^^ string "(" ^^ pp_raw_name name ^^ string "," ^^ pp_raw_accessor_list accessor_list ^^ string "," ^^ pp_raw_valu valu ^^ string ")"
| WriteReg(name,valu) -> string "WriteReg" ^^ string "(" ^^ pp_raw_name name ^^ string "," ^^ pp_raw_valu valu ^^ string ")"

and pp_raw_term x = match x with
| Def(def) -> string "Def" ^^ string "(" ^^ pp_raw_def def ^^ string ")"
| Event(event) -> string "Event" ^^ string "(" ^^ pp_raw_event event ^^ string ")"
| Top(def0,event0) -> string "Top" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (def0) -> string "(" ^^ pp_raw_def def0 ^^ string ")") def0) ^^ string "]" ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (event0) -> string "(" ^^ pp_raw_event event0 ^^ string ")") event0) ^^ string "]" ^^ string ")"


let rec pp_u32 x = string (string_of_int x)

and pp_vu32 x = string x ^^ string ""

and pp_u64 x = string x ^^ string ""

and pp_bvi x = string (x)

and pp_bv x = string (x)

and pp_name x = string x ^^ string ""

and pp_j x = string_of_int x

and pp_valu x = match x with
| Val_Symbolic(vu32) -> pp_vu32 vu32
| Val_I64(bvi) -> group(string "" ^^ string "(_" ^^ break 1 ^^ pp_bvi bvi ^^ break 1 ^^ string "64" ^^ break 1 ^^ string ")" ^^ string "")
| Val_I128(bvi) -> group(string "" ^^ string "(_" ^^ break 1 ^^ pp_bvi bvi ^^ break 1 ^^ string "128" ^^ break 1 ^^ string ")" ^^ string "")
| Val_Bool(bool) -> group(string "" ^^ string "Bool" ^^ break 1 ^^ string "(" ^^ break 1 ^^ nest 2 (pp_bool bool) ^^ break 1 ^^ string ")" ^^ string "")
| Val_Bits(bv) -> pp_bv bv
| Val_String -> string "s"
| Val_Unit -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "unit" ^^ break 1 ^^ string ")" ^^ string "")
| Val_Vector(valu0) -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "vec" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (valu0) -> nest 2 (pp_valu valu0)) valu0)) ^^ break 1 ^^ string "}" ^^ break 1 ^^ string ")" ^^ string "")
| Val_List(valu0) -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "list" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (valu0) -> nest 2 (pp_valu valu0)) valu0)) ^^ break 1 ^^ string "}" ^^ break 1 ^^ string ")" ^^ string "")
| Val_Struct(struct_element0) -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "struct" ^^ break 1 ^^ group(separate (break 1) (List.map (function (struct_element0) -> nest 2 (pp_struct_element struct_element0)) struct_element0)) ^^ break 1 ^^ string ")" ^^ string "")
| Val_Poison -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "poison" ^^ break 1 ^^ string ")" ^^ string "")

and pp_struct_element x = match x with
| Struct_elem(name,valu) -> group(string "" ^^ string "(" ^^ break 1 ^^ pp_name name ^^ break 1 ^^ nest 2 (pp_valu valu) ^^ break 1 ^^ string ")" ^^ string "")

and pp_ty x = match x with
| Ty_Bool -> string "Bool"
| Ty_BitVec(u32) -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "BitVec" ^^ break 1 ^^ pp_u32 u32 ^^ break 1 ^^ string ")" ^^ string "")

and pp_bool x = match x with
| True -> string "true"
| False -> string "false"

and pp_exp x = match x with
| Var(vu32) -> pp_vu32 vu32
| Bits(bv) -> pp_bv bv
| Bool(bool) -> pp_bool bool
| Eq(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "eq" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Neq(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "neq" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| And(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "and" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Or(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "or" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Not(exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "not" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| Bvnot(exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvnot" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| Bvredand(exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvredand" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| Bvredor(exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvredor" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| Bvand(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvand" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvor(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvor" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvxor(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvxor" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvnand(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvnand" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvnor(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvnor" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvxnor(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvxnor" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvneg(exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvneg" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| Bvadd(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvadd" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsub(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsub" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvmul(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvmul" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvudiv(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvudiv" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsdiv(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsdiv" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvurem(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvurem" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsrem(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsrem" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsmod(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsmod" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvult(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvult" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvslt(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvslt" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvule(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvule" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsle(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsle" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvuge(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvuge" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsge(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsge" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvugt(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvugt" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvsgt(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvsgt" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Extract(u32,u32_prime,exp_prime_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "(_" ^^ break 1 ^^ string "extract" ^^ break 1 ^^ pp_u32 u32 ^^ break 1 ^^ pp_u32 u32_prime ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_exp exp_prime_prime) ^^ break 1 ^^ string ")" ^^ string "")
| ZeroExtend(u32,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "(_" ^^ break 1 ^^ string "zero_extend" ^^ break 1 ^^ pp_u32 u32 ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| SignExtend(u32,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "(_" ^^ break 1 ^^ string "sign_extend" ^^ break 1 ^^ pp_u32 u32 ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvshl(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvshl" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvlshr(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvlshr" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Bvashr(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "bvashr" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Concat(exp,exp_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "concat" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| Ite(exp,exp_prime,exp_prime_prime) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "ite" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ nest 2 (pp_exp exp_prime_prime) ^^ break 1 ^^ string ")" ^^ string "")

and pp_def x = match x with
| DeclareConst(vu32,ty) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "declare-const" ^^ break 1 ^^ pp_vu32 vu32 ^^ break 1 ^^ nest 2 (pp_ty ty) ^^ break 1 ^^ string ")" ^^ string "")
| DefineConst(vu32,exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "define-const" ^^ break 1 ^^ pp_vu32 vu32 ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| Assert(exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "assert" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")

and pp_accessor x = match x with
| Field(name) -> group(string "" ^^ string "(_" ^^ break 1 ^^ string "field" ^^ break 1 ^^ pp_name name ^^ break 1 ^^ string ")" ^^ string "")

and pp_accessor_list x = match x with
| Nil -> string "nil"
| Cons(accessor0) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (break 1) (List.map (function (accessor0) -> nest 2 (pp_accessor accessor0)) accessor0)) ^^ break 1 ^^ string ")" ^^ string "")

and pp_event x = match x with
| ReadReg(name,accessor_list,valu) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "read-reg" ^^ break 1 ^^ pp_name name ^^ break 1 ^^ nest 2 (pp_accessor_list accessor_list) ^^ break 1 ^^ nest 2 (pp_valu valu) ^^ break 1 ^^ string ")" ^^ string "")
| WriteReg(name,valu) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "write-reg" ^^ break 1 ^^ pp_name name ^^ break 1 ^^ nest 2 (pp_valu valu) ^^ break 1 ^^ string ")" ^^ string "")

and pp_term x = match x with
| Def(def) -> pp_def def
| Event(event) -> pp_event event
| Top(def0,event0) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "formulas" ^^ break 1 ^^ group(separate (break 1) (List.map (function (def0) -> nest 2 (pp_def def0)) def0)) ^^ break 1 ^^ string ")" ^^ break 1 ^^ string "(" ^^ break 1 ^^ string "events" ^^ break 1 ^^ group(separate (break 1) (List.map (function (event0) -> nest 2 (pp_event event0)) event0)) ^^ break 1 ^^ string ")" ^^ string "")

